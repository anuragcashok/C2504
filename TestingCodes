PHTConfig.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ProjectPHT.Pages;
using ProjectPHT.ViewModels;

namespace ProjectPHT
{
    public static class PHTConfig
    {
        public static UserViewModel userViewModel {  get; set; }
        public static LoginViewModel loginViewModel { get; set; }
        public static SignUpViewModel signUpViewModel { get; set; }
        public static ProfileSettingsViewModel profileSettingsViewModel { get; set; }
        public static ContactSupportViewModel contactSupportViewModel { get; set; }
        public static DailyHealthMetrixEntryViewModel dailyHealthMetrixEntryViewModel { get; set; }
        public static DeviceSyncViewModel deviceSyncViewModel { get; set; }
        public static HealthHistoryViewModel healthHistoryViewModel { get; set; }
        public static HealthInsightViewModel healthInsightViewModel { get; set; }
        public static GoalsViewModel goalsViewModel { get; set; }
        public static NotificationViewModel notificationViewModel { get; set; }
        public static LoginWindow loginWindow { get; set; }
        public static SignUpWindow signUpWindow { get; set; }
        public static HomePageWindow homePageWindow { get; set; }
        public static DailyHealthMetrixEntryWindow dailyHealthMetrixEntryWindow { get; set; }
        public static DeviceIntegrationWindow deviceIntegrationWindow { get; set; }
        public static HealthGoalsWindow healthGoalsWindow { get; set; }
        public static HealthHistoryWindow healthHistoryWindow { get; set; }
        public static AddGoalWindow frmAddGoal { get; set; }
        public static EditGoalWindow frmEditGoalWindow { get; set; }
        public static HealthInsightWindow healthInsightWindow { get; set; }
        public static ProfileSettingsWindow profileSettingsWindow { get; set; }
        public static UserDashBoardWindow userDashBoardWindow { get; set; }
        public static AdminDashboardWindow adminDashboardWindow { get; set; }
        public static UserManagementWindow userManagementWindow { get; set; }
        public static SystemPerformanceWindow systemPerformanceWindow { get; set; }
        public static PlatformAnalysisWindow platformAnalysisWindow { get; set; }
        public static ContactSettings contactSupportWindow { get; set; }
        public static CreateUserWindow createUserWindow { get; set; }
        public static UpdateUserWindow updateUserWindow { get; set; }

        static PHTConfig()
        {
            userViewModel = new UserViewModel();
            loginViewModel = new LoginViewModel();
            signUpViewModel = new SignUpViewModel();
            profileSettingsViewModel = new ProfileSettingsViewModel();
            contactSupportViewModel = new ContactSupportViewModel();
            dailyHealthMetrixEntryViewModel = new DailyHealthMetrixEntryViewModel();
            deviceSyncViewModel = new DeviceSyncViewModel();
            healthHistoryViewModel = new HealthHistoryViewModel();
            healthInsightViewModel = new HealthInsightViewModel();
            goalsViewModel = new GoalsViewModel();
            notificationViewModel = new NotificationViewModel();
            loginWindow = new LoginWindow();
            signUpWindow = new SignUpWindow();
            homePageWindow = new HomePageWindow();
            dailyHealthMetrixEntryWindow = new DailyHealthMetrixEntryWindow();
            deviceIntegrationWindow = new DeviceIntegrationWindow();
            healthGoalsWindow = new HealthGoalsWindow();
            frmAddGoal = new AddGoalWindow();
            frmEditGoalWindow = new EditGoalWindow();
            healthHistoryWindow = new HealthHistoryWindow();
            healthInsightWindow = new HealthInsightWindow();
            profileSettingsWindow = new ProfileSettingsWindow();
            userDashBoardWindow = new UserDashBoardWindow();
            adminDashboardWindow = new AdminDashboardWindow();
            userManagementWindow = new UserManagementWindow();
            systemPerformanceWindow = new SystemPerformanceWindow();
            platformAnalysisWindow = new PlatformAnalysisWindow();
            contactSupportWindow = new ContactSettings();
            createUserWindow = new CreateUserWindow();
            updateUserWindow = new UpdateUserWindow();
        }
    }
}

==============================================================================================

UserViewModel

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ProjectPHT.Commands;
using ProjectPHT.EFRepo;
using ProjectPHT.Repo;
using System.Windows.Input;
using System.Windows;
using ProjectPHT.Entities;
using System.Security.Cryptography;


namespace ProjectPHT.ViewModels
{
    public delegate void DWindoClose();

    public class UserViewModel : ViewModelBase
    {
        public DWindoClose WindowClose;
        public DWindoClose EditWindowClose;

        public IUserRepo _repo = EFUserRepo.Instance;

        private User _newUser;


        public User NewUser
        {
            get
            {
                return _newUser;
            }
            set
            {
                _newUser = value; OnPropertyChanged(nameof(NewUser));
            }
        }


        private User _selectedUser;


        public User SelectedUser
        {
            get
            {
                return _selectedUser;
            }
            set
            {
                _selectedUser = value; OnPropertyChanged(nameof(SelectedUser));
            }
        }



        private User _currentUser;


        public User CurrentUser
        {
            get
            {
                return _currentUser;
            }
            set
            {
                _currentUser = value; OnPropertyChanged(nameof(CurrentUser));
            }
        }

        private ObservableCollection<User> _users;


        public ObservableCollection<User> Users
        {
            get
            {
                return _users;
            }
            set
            {
                _users = value; OnPropertyChanged(nameof(Users));
            }
        }

        public ICommand CreateCommand { get; set; }
        //public ICommand LoginCommand { get; set; }

        public ICommand UpdateCommand { get; set; }

        public ICommand DeleteCommand { get; set; }

        public UserViewModel()
        {
            NewUser = new User
            {
                Name = "",
                Email = "",
                PasswordHash = "",
                DateOfBirth = DateTime.Now,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,

            };

            CurrentUser = new User
            {
                Name = "",
                Email = "",
                PasswordHash = ""
            };

            LoadUsers();
            CreateCommand = new RelayCommand(Create);
            //LoginCommand = new RelayCommand(Login);
            UpdateCommand = new RelayCommand(Update);
            DeleteCommand = new RelayCommand(Delete);
        }

        public void HashPassword()
        {
            string password = NewUser.PasswordHash;
            using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
            {
                byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
                byte[] hashBytes = md5.ComputeHash(passwordBytes);

                // Convert the hash bytes to a hexadecimal string
                string hashString = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();

                NewUser.PasswordHash = hashString;
            }
        }
        private void Delete()
        {
            if (this.SelectedUser == null)
            {
                var result1 = MessageBox.Show(messageBoxText: "Please select the user to Delete",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                return;
            }

            var res = MessageBox.Show(messageBoxText: "Are you sure to Delete this User?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);

            if (res != MessageBoxResult.Yes)
            {
                return;
            }

            _repo.Delete(this.SelectedUser);
            this.SelectedUser = this.SelectedUser;
            var result = MessageBox.Show(messageBoxText: $"Alert {SelectedUser.UserID} is Deleted successfully",
                       caption: "Alert",
                       button: MessageBoxButton.OK,
                       icon: MessageBoxImage.Information);
            LoadUsers();
        }

        private void Update()
        {

            if (this.SelectedUser == null)
            {
                return;
            }

            var res = MessageBox.Show(messageBoxText: "Are you sure to Update this User?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);

            if (res != MessageBoxResult.Yes)
            {
                return;
            }

            _repo.Update(this.SelectedUser);
            this.SelectedUser = this.SelectedUser;

            var result = MessageBox.Show(messageBoxText: $"Alert {SelectedUser.UserID} is updated successfully",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
            LoadUsers();

            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
        }

        private void LoadUsers()
        {
            Users = _repo.ReadAll();
        }

        private void Create()
        {
            HashPassword();
            var newUser = new User
            {
                Name = NewUser.Name,
                PasswordHash = NewUser.PasswordHash,
                Email = NewUser.Email,
                DateOfBirth = NewUser.DateOfBirth,
                Gender = NewUser.Gender,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,
            };
            try
            {
                var result = MessageBox.Show(messageBoxText: "Are you sure to Create ?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
                if (result != MessageBoxResult.Yes)
                {
                    return;
                }
                _repo.Create(newUser);/////

                result = MessageBox.Show(messageBoxText: "Created Successfully",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);

                LoadUsers();

                if (WindowClose != null)
                {
                    WindowClose();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"{ex.Message}");
            }
        }

        /*public bool CanLogin()
        {
            return CurrentUser.Name.Length > 0 && CurrentUser.PasswordHash.Length > 0;
        }

        private void Login()
        {
            try
            {
                _repo.Login(CurrentUser);
                MessageBox.Show($"Login SuccessFull");


                if (CurrentUser.Username == "admin")
                {

                    PHTConfig.adminDashboardWindow.Show();
                }
                else
                {
                    PHTConfig.userDashboardWindow.Show();
                }
                if (WindowClose != null)
                {
                    WindowClose();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show($"{ex.Message}");
            }
        }*/




    }
}

==============================================================================

LoginViewModel

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ProjectPHT.Commands;
using ProjectPHT.EFRepo;
using ProjectPHT.Repo;
using System.Windows.Input;
using System.Windows;
using ProjectPHT.Entities;
using ProjectPHT.Pages;

namespace ProjectPHT.ViewModels
{
    public class LoginViewModel : ViewModelBase
    {
        private User _currentUser;
        public User CurrentUser
        {
            get { return _currentUser; }
            set { _currentUser = value; OnPropertyChanged(nameof(CurrentUser)); }

        }
        public ICommand LoginCommand { get; set; }
        public LoginViewModel()
        {
            CurrentUser = new User
            {
                Email = "",
                PasswordHash = ""
            };
            LoginCommand = new RelayCommand(Login);
        }

        private IUserRepo _repo = new EFUserRepo();
        public void Login()
        {
            if(_repo.IsValidUser(CurrentUser))
            {
                MessageBox.Show(messageBoxText: "Login Successfull");
                if (CurrentUser.Email == "admin" && CurrentUser.PasswordHash == "123") 
                {
                    PHTConfig.adminDashboardWindow.Show();
                }
                else
                {
                    PHTConfig.userDashBoardWindow.Show();
                }
            }
            else
            {
                MessageBox.Show("Login Unsuccessfull");
            }
        }
    }
}

==========================================================================================

IUserRpo

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ProjectPHT.Entities;

namespace ProjectPHT.Repo
{
    public interface IUserRepo
    {
        //void Authenticate(string UserName, string PasswordHash);
        bool IsValidUser(User user);
        void Create(User user);
        void Update(User user);
        void Delete(User user);
        ObservableCollection<User> ReadAll();
    }
}

===================================================================================

UserMangementWindow.xaml

<Window x:Class="ProjectPHT.Pages.UserManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="UserManagementWindow" Height="450" Width="800" Closing="Window_Closing_1" Background="#FF0D3937">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="59*"/>
            <ColumnDefinition Width="141*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10,10,10,10" Grid.ColumnSpan="2">
            <TextBox x:Name="UserNameTextBox" Width="200" Margin="0,0,10,0" />
            <Button x:Name="btnAddUser" Content="Add User" Width="100" Click="btnAddUser_Click"/>
            <Button x:Name="btnEdit" Content="Edit User" Width="100" Click="btnEdit_Click"/>
            <Button x:Name="btnDelete" Content="Delete User" Width="100" Command="{Binding DeleteCommand}"/>
        </StackPanel>

        <DataGrid x:Name="UserDataGrid" Grid.Row="1" Margin="10,10,10,10" AutoGenerateColumns="False" ItemsSource="{Binding Users}"
                  SelectionMode="Single" SelectionUnit="FullRow" SelectedItem="{Binding SelectedUser , Mode=TwoWay}" Grid.ColumnSpan="2"
                  >
            <DataGrid.Columns>
                <DataGridTextColumn Header="User ID" Binding="{Binding UserID}" Width="*"/>
                <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="*"/>
                <DataGridTextColumn Header="Email" Binding="{Binding Email}" Width="*"/>
                <DataGridTextColumn Header="Password" Binding="{Binding PasswordHash}" Width="*"/>
                <DataGridTextColumn Header="DateOfBirth" Binding="{Binding DateOfBirth}" Width="*"/>
                <DataGridTextColumn Header="Gender" Binding="{Binding Gender}" Width="*"/>
                <DataGridTextColumn Header="CreatedAt" Binding="{Binding CreatedAt}" Width="*"/>
                <DataGridTextColumn Header="UpdatedAt" Binding="{Binding UpdatedAt}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>


==============================================================================

UserManagementWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ProjectPHT.Pages
{
    /// <summary>
    /// Interaction logic for UserManagementWindow.xaml
    /// </summary>
    public partial class UserManagementWindow : Window
    {
        public UserManagementWindow()
        {
            InitializeComponent();
            DataContext = PHTConfig.userViewModel;
        }

        private void btnAddUser_Click(object sender, RoutedEventArgs e)
        {
            PHTConfig.createUserWindow.Show();

        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            PHTConfig.updateUserWindow.Show();
        }

        private void Window_Closing_1(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
=========================================================================

AdminDashboardWindow.xaml

<Window x:Class="ProjectPHT.Pages.AdminDashboardWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        Title="AdminDashboardWindow" Height="450" Width="800" Closing="Window_Closing" Background="#FF0D3937" WindowState="Maximized">
    <Canvas>
        <TextBlock TextWrapping="Wrap" Text="ADMIN DASHBOARD" Height="60" Width="800" HorizontalAlignment="Left"
VerticalAlignment="Center" FontSize="36" FontWeight="Bold" Background="White" 
TextAlignment="Center" Foreground="#FFE51717" FontFamily="Copperplate Gothic Bold"/>
        <Button x:Name="btnUserManagement"  Content="User&#xD;&#xA;Management" Height="59" Canvas.Left="378" Canvas.Top="111" Width="136" HorizontalAlignment="Left" VerticalAlignment="Center" Click="btnUserManagement_Click" />
        <Button x:Name="btnPerformanceMonitoring" Content="system&#xD;&#xA;Performance&#xD;&#xA;Monitoring" Height="59" Canvas.Left="378" Canvas.Top="208" Width="136" HorizontalAlignment="Left" VerticalAlignment="Center" />
        <Button x:Name="btnPlatformAnalysys" Content="Platform&#xD;&#xA;Analysis" Height="59" Canvas.Left="380" Canvas.Top="306" Width="136" HorizontalAlignment="Left" VerticalAlignment="Center"/>

    </Canvas>
</Window>

==========================================================================

AdminDashboardWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ProjectPHT.Pages
{
    /// <summary>
    /// Interaction logic for AdminDashboardWindow.xaml
    /// </summary>
    public partial class AdminDashboardWindow : Window
    {
        public AdminDashboardWindow()
        {
            InitializeComponent();
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void btnUserManagement_Click(object sender, RoutedEventArgs e)
        {
            PHTConfig.userManagementWindow.Show();
        }
    }
}
=======================================================================

EFUserRepo
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using ProjectPHT.Entities;
using ProjectPHT.Repo;

namespace ProjectPHT.EFRepo
{
    public class EFUserRepo : IUserRepo
    {
        private static EFUserRepo _instance;
        public ObservableCollection<User> Users { get; set; }
        public static EFUserRepo Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new EFUserRepo();
                return _instance;
            }

        }
        //public User CurrentUser { get; set; } = null;
        private PHT_DbEntities _context;
        public EFUserRepo()
        {
            _context = new PHT_DbEntities();
        }
        public void Create(User user)
        {
            //throw new NotImplementedException();
            _context.Users.Add(user);
            _context.SaveChanges();
        }

        public string GetPassword(string password)
        {
            using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
            {
                byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
                byte[] hashBytes = md5.ComputeHash(passwordBytes);

                // Convert the hash bytes to a hexadecimal string
                string inputHash = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                return inputHash;
            }


        }
        /*public void Login(User user)
        {
            var HashedPassword = GetPassword(user.PasswordHash);
            var User = _context.Users.FirstOrDefault(u => u.Email == user.Email && u.PasswordHash == HashedPassword);
            if (User == null)
            {
                throw new Exception("Invalid username or password");
            }
            else
            {
                CurrentUser = User;
            }

        }*/
        public bool IsValidUser(User user)
        {
            //var HashedPassword = GetPassword(user.PasswordHash);
            var User = _context.Users.FirstOrDefault(u => u.Email == user.Email && u.PasswordHash == user.PasswordHash);
            if (User == null)
            {
                MessageBox.Show("Invalid email or password");
                return false;
            }
            else
            {
                //CurrentUser = User;
                return true;
            }

            //return user != null;
        }
        public void Delete(User userModel)
        {
            var userToDelete = _context.Users.Find(userModel.UserID);
            if (userToDelete != null)
            {
                _context.Users.Remove(userToDelete);
                _context.SaveChanges();
            }
        }
        public void Update(User userModel)
        {
            var existingUser = _context.Users.Find(userModel.UserID);
            if (existingUser != null)
            {
                _context.Entry(existingUser).CurrentValues.SetValues(userModel);
                // existingUser.Username = userModel.Username;
                _context.SaveChanges();
            }
        }
        public ObservableCollection<User> ReadAll()
        {
            return new ObservableCollection<User>(_context.Users.ToList());
        }
    }
}

======================================================================================
HomePageWindow.xaml

<Window x:Class="ProjectPHT.Pages.HomePageWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="HomePageWindow" Height="450" Width="800" Background="#FF0D3937" Closed="Window_Closed_1">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="359*"/>
            <ColumnDefinition Width="41*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="HOME PAGE" FontSize="36" FontWeight="Bold" TextAlignment="Center" 
                   Foreground="#FFE51717" Background="White"
                   FontFamily="Copperplate Gothic Bold" 
                   Grid.Row="0" Height="60" Grid.ColumnSpan="2"/>

        <StackPanel Orientation="Vertical" Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="290,0,0,0">
            <Button x:Name="btnLogin" Content="Login" Width="200" Margin="10" FontSize="20" FontWeight="Bold" Height="60" Click="btnLogin_Click"/>
            <Button x:Name="btnSignUp" Content="Sign Up" Width="200" Margin="10" FontWeight="Bold" FontSize="20" Height="60" Click="btnSignUp_Click"/>
            <Button x:Name="btnContactSupport" Content="Learn More...." Width="200" Margin="10" FontSize="20" FontWeight="Bold" Height="60" Click="btnContactSupport_Click"/>
        </StackPanel>
    </Grid>
</Window>
=====================================================================================================

CreateUserWindoe.xaml
<Window x:Class="ProjectPHT.Pages.CreateUserWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        Title="CreateUserWindow" Height="550" Width="800" Closing="Window_Closing" Background="#FF0D3937">
    <Canvas>
        <TextBlock TextWrapping="Wrap" Text="CREATE USER" Height="60" Width="800" HorizontalAlignment="Left"
    VerticalAlignment="Center" FontSize="36" FontWeight="Bold" Background="White" 
    TextAlignment="Center" Foreground="#FFE51717" FontFamily="Copperplate Gothic Bold"/>
        <TextBlock Canvas.Left="300" TextWrapping="Wrap" Text="Name" Canvas.Top="90" Height="36" Width="135" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#FFF9F6F6"/>
        <TextBlock Canvas.Left="300" TextWrapping="Wrap" Text="Email" Canvas.Top="155" Height="36" Width="135" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#FFF4EEEE"/>
        <TextBox Canvas.Left="528" TextWrapping="Wrap" Canvas.Top="90" Width="245" Height="36" HorizontalAlignment="Center" VerticalAlignment="Top" Background="#FFFCFCFC" Text="{Binding NewUser.Name}"/>
        <TextBox Canvas.Left="528" TextWrapping="Wrap" Canvas.Top="151" Width="245" Height="36" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{Binding NewUser.Email}"/>
        <Button Content="Create" Canvas.Left="528" Canvas.Top="465" HorizontalAlignment="Center" VerticalAlignment="Top" Width="245" Height="34" FontSize="20" Command="{Binding CreateCommand}"/>
        <TextBlock Canvas.Left="300" TextWrapping="Wrap" Text="Password" Canvas.Top="336" Height="36" Width="135" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#FFFCFBFB"/>
        <TextBox Canvas.Left="528" TextWrapping="Wrap" Canvas.Top="332" Width="245" Height="36" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{Binding NewUser.PasswordHash}"/>
        <TextBlock Canvas.Left="300" TextWrapping="Wrap" Text="Gender" Canvas.Top="212" Height="36" Width="135" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#FFFDF9F9"/>
        <TextBlock Canvas.Left="300" TextWrapping="Wrap" Text="DOB" Canvas.Top="275" Height="36" Width="135" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Foreground="#FFF6F3F3"/>
        <TextBox Canvas.Left="528" TextWrapping="Wrap" Canvas.Top="212" Width="245" Height="36" Background="#FFFCFCFC" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{Binding NewUser.Gender}"/>
        <TextBox Canvas.Left="528" TextWrapping="Wrap" Canvas.Top="271" Width="245" Height="36" HorizontalAlignment="Center" VerticalAlignment="Top" Text="{Binding NewUser.DateOfBirth}"/>

    </Canvas>
</Window>
==============================================================================
CreateUserWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ProjectPHT.Pages
{
    /// <summary>
    /// Interaction logic for CreateUserWindow.xaml
    /// </summary>
    public partial class CreateUserWindow : Window
    {
        public CreateUserWindow()
        {
            InitializeComponent();
            DataContext = PHTConfig.signUpViewModel;
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
=======================================================================================
UpdateUserWindow.xaml

<Window x:Class="ProjectPHT.Pages.UpdateUserWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="UpdateUser Window" Height="550" Width="800" Closing="Window_Closing" Background="#FF0D3937">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="UPDATE USER" 
                   FontSize="36" FontWeight="Bold" TextAlignment="Center" 
                   Foreground="#FFE51717" Background="White"
                   FontFamily="Copperplate Gothic Bold" 
                   Grid.Row="0" Margin="0" Height="60"/>

        <TextBlock Text="Name" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF9F6F6" Margin="200,10,0,0" 
                   Grid.Row="1"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Background="#FFFCFCFC" 
                  Text="{Binding SelectedUser .Name}" 
                  Margin="400,10,0,0" Grid.Row="1"/>

        <TextBlock Text="Email" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF4EEEE" Margin="200,10,0,0" 
                   Grid.Row="2"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding SelectedUser .Email}" 
                  Margin="400,10,0,0" Grid.Row="2"/>

        <TextBlock Text="Password" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFCFBFB" Margin="200,10,0,0" 
                   Grid.Row="3"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding SelectedUser .PasswordHash}" 
                  Margin="400,10,0,0" Grid.Row="3"/>

        <TextBlock Text="Gender" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFDF9F9" Margin="200,10,0,0" 
                   Grid.Row="4"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding SelectedUser .Gender}" 
                  Margin="400,10,0,0" Grid.Row="4"/>

        <TextBlock Text="DOB" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF6F3F3" Margin="200,10,0,0" 
                   Grid.Row="5"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding SelectedUser .DateOfBirth}" 
                  Margin="400,10,0,0" Grid.Row="5"/>

        <Button Content="Update" Width="245" Height="34" 
                FontSize="20" Command="{Binding UpdateCommand}" 
                HorizontalAlignment="Center" VerticalAlignment="Top" 
                Margin="0,20,0,0" Grid.Row="6"/>
    </Grid>
</Window>
===================================================================================

UpdateUserWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ProjectPHT.Pages
{
    /// <summary>
    /// Interaction logic for UpdateUserWindow.xaml
    /// </summary>
    public partial class UpdateUserWindow : Window
    {
        public UpdateUserWindow()
        {
            InitializeComponent();
            DataContext = PHTConfig.userViewModel;
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}

==============================================================================================
https://meet.google.com/ucn-sxsy-zvc?hs=224
==============================================================================================
LoginPageWindow.xaml

<Window x:Class="ProjectPHT.Pages.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="LoginWindow" Height="450" Width="800" Closing="Window_Closing" Background="#FF0D3937">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="677*"/>
            <ColumnDefinition Width="123*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="LOGIN PAGE" 
                   FontSize="36" FontWeight="Bold" TextAlignment="Center" 
                   Foreground="#FFE51717" Background="White"
                   FontFamily="Copperplate Gothic Bold" 
                   Grid.Row="0" Height="60" Grid.ColumnSpan="2"/>

        <TextBlock Text="Email" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF7F3F3" Margin="200,15,0,0" 
                   Grid.Row="1"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Background="#FFFCFCFC" 
                  Text="{Binding CurrentUser .Email}" 
                  Margin="400,10,0,0" Grid.Row="1"/>

        <TextBlock Text="Password" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF9F6F6" Margin="200,15,0,0" 
                   Grid.Row="2"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding CurrentUser .PasswordHash}" 
                  Margin="400,10,0,0" Grid.Row="2"/>

        <Button Content="Login" Width="244" Height="34" 
                FontSize="20" Command="{Binding LoginCommand}" 
                HorizontalAlignment="Center" VerticalAlignment="Top" 
                Margin="0,20,0,0" Grid.Row="3"/>
    </Grid>
</Window>

=============================================================================

SignUpPageWindow.xaml

<Window x:Class="ProjectPHT.Pages.SignUpWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="SignUpWindow" Height="550" Width="800" Closing="Window_Closing" Background="#FF0D3937">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="SIGNUP PAGE" 
                   FontSize="36" FontWeight="Bold" TextAlignment="Center" 
                   Foreground="#FFE51717" Background="White"
                   FontFamily="Copperplate Gothic Bold" 
                   Grid.Row="0" Margin="0" Height="60"/>

        <TextBlock Text="Name" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF9F6F6" Margin="200,10,0,0" 
                   Grid.Row="1"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Background="#FFFCFCFC" 
                  Text="{Binding CreateUser .Name}" 
                  Margin="400,10,0,0" Grid.Row="1"/>

        <TextBlock Text="Email" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF4EEEE" Margin="200,10,0,0" 
                   Grid.Row="2"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding CreateUser .Email}" 
                  Margin="400,10,0,0" Grid.Row="2"/>

        <TextBlock Text="Password" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFCFBFB" Margin="200,10,0,0" 
                   Grid.Row="3"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding CreateUser .PasswordHash}" 
                  Margin="400,10,0,0" Grid.Row="3"/>

        <TextBlock Text="Gender" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFDF9F9" Margin="200,10,0,0" 
                   Grid.Row="4"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding CreateUser .Gender}" 
                  Margin="400,10,0,0" Grid.Row="4"/>

        <TextBlock Text="DOB" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF6F3F3" Margin="200,10,0,0" 
                   Grid.Row="5"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding CreateUser .DateOfBirth}" 
                  Margin="400,10,0,0" Grid.Row="5"/>

        <Button Content="Sign Up" Width="245" Height="34" 
                FontSize="20" Command="{Binding CreateCommand}" 
                HorizontalAlignment="Center" VerticalAlignment="Top" 
                Margin="0,20,0,0" Grid.Row="6"/>
    </Grid>
</Window>
===============================================================================
UserDashboardWindow
<Window x:Class="ProjectPHT.Pages.UserDashBoardWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="User DashBoardWindow" Height="450" Width="800" Closing="Window_Closing" Background="#FF0D3937">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            
        </Grid.RowDefinitions>

        <TextBlock Text="USER DASHBOARD" 
                   FontSize="36" FontWeight="Bold" TextAlignment="Center" 
Foreground="#FFE51717" Background="White"
FontFamily="Copperplate Gothic Bold" 
Grid.Row="0" Margin="0" Height="60"/>

        <StackPanel Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Button x:Name="btnMetrixEntry" Content="Daily&#xA;Health Metrix&#xA;Entry" 
                    Height="59" Width="136" 
                    Click="btnMetrixEntry_Click" Margin="10"/>
            <Button x:Name="btnHealthInsight" Content="Health&#xD;&#xA;Insight" 
                    Height="59" Width="136" 
                    Click="btnHealthInsight_Click" Margin="10"/>
            <Button x:Name="btnHealthHistory" Content="Health&#xD;&#xA;History" 
                    Height="59" Width="136" 
                    Click="btnHealthHistory_Click" Margin="10"/>
            <Button x:Name="btnHealthGoals" Content="Health&#xD;&#xA;Goals" 
                    Height="59" Width="136" 
                    Click="btnHealthGoals_Click" Margin="10"/>
            <Button x:Name="btnDeviceIntegration" Content="Device &#xD;&#xA;Integration" 
                    Height="59" Width="136" 
                    Click="btnDeviceIntegration_Click" Margin="10"/>
            <Button x:Name="btnSettings" Content="Settings" 
                    Height="59" Width="136" 
                    Click="Button_Click" Margin="10"/>
        </StackPanel>
    </Grid>
</Window>

===========================================================================================

CreateUserWindow

<Window x:Class="ProjectPHT.Pages.CreateUserWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ProjectPHT.Pages"
        mc:Ignorable="d"
        Title="CreateUser Window" Height="550" Width="800" Closing="Window_Closing" Background="#FF0D3937" WindowState="Maximized">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="CREATE USER" FontSize="36" FontWeight="Bold" TextAlignment="Center" 
                   Foreground="#FFE51717" Background="White"
                   FontFamily="Copperplate Gothic Bold" 
                   Grid.Row="0" Margin="0" Height="60"/>

        <TextBlock Text="Name" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF9F6F6" Margin="200,10,0,0" 
                   Grid.Row="1"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Background="#FFFCFCFC" 
                  Text="{Binding NewUser .Name}" 
                  Margin="400,10,0,0" Grid.Row="1"/>

        <TextBlock Text="Email" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF4EEEE" Margin="200,10,0,0" 
                   Grid.Row="2"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding NewUser .Email}" 
                  Margin="400,10,0,0" Grid.Row="2"/>

        <TextBlock Text="Password" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFCFBFB" Margin="200,10,0,0" 
                   Grid.Row="3"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding NewUser .PasswordHash}" 
                  Margin="400,10,0,0" Grid.Row="3"/>

        <TextBlock Text="Gender" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFFDF9F9" Margin="200,10,0,0" 
                   Grid.Row="4"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding NewUser .Gender}" 
                  Margin="400,10,0,0" Grid.Row="4"/>

        <TextBlock Text="DOB" FontSize="20" 
                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                   Foreground="#FFF6F3F3" Margin="200,10,0,0" 
                   Grid.Row="5"/>

        <TextBox Width="245" Height="36" 
                  HorizontalAlignment="Left" VerticalAlignment="Top" 
                  Text="{Binding NewUser .DateOfBirth}" 
                  Margin="400,10,0,0" Grid.Row="5"/>

        <Button Content="Create" Width="245" Height="34" 
                FontSize="20" Command="{Binding CreateCommand}" 
                HorizontalAlignment="Center" VerticalAlignment="Top" 
                Margin="0,20,0,0" Grid.Row="6"/>
    </Grid>
</Window>










Addoreditwindow.xaml
<Window x:Class="ImageResizerApp.AddOrEditWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ImageResizerApp"
        mc:Ignorable="d"
        Title="AddOrEditWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid>
        <TextBlock x:Name="lblName" HorizontalAlignment="Left" Margin="160,64,0,0" TextWrapping="Wrap" Text="Name:" VerticalAlignment="Top" Height="28" Width="117"/>
        <TextBox x:Name="txtName" HorizontalAlignment="Left" Margin="367,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="212" Height="28" Text="{Binding Image.Name, UpdateSourceTrigger=PropertyChanged , Mode=TwoWay, ValidatesOnDataErrors=True}">
            <!--<TextBox.ToolTip>
                <Binding Path="ErrorMessage"/>
            </TextBox.ToolTip>-->
        </TextBox>

        <TextBlock x:Name="lblRotation" HorizontalAlignment="Left" Margin="160,114,0,0" TextWrapping="Wrap" Text="Rotation:" VerticalAlignment="Top" Height="28" Width="117"/>
        <TextBox x:Name="txtRotation" HorizontalAlignment="Left" ToolTip="Enter values within range of 0 and 360" Margin="367,114,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="212" Height="28" Text="{Binding Image.Rotation, UpdateSourceTrigger=PropertyChanged}">
            <!--<TextBox.ToolTip>
                <Binding Path="ErrorMessage"/>
            </TextBox.ToolTip>-->
        </TextBox>
        
        <TextBlock x:Name="lblHeight" HorizontalAlignment="Left" Margin="160,170,0,0" TextWrapping="Wrap" Text="Height:" VerticalAlignment="Top" Height="28" Width="117"/>
        <TextBox x:Name="txtHeight" HorizontalAlignment="Left" ToolTip="Enter values within range of 100 and 500" Margin="367,170,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="212" Height="28" Text="{Binding Image.Height, UpdateSourceTrigger=PropertyChanged ,Mode=TwoWay ,ValidatesOnDataErrors=True}"/>
        <TextBlock x:Name="lblWidth" HorizontalAlignment="Left" Margin="160,231,0,0" TextWrapping="Wrap" Text="Width:" VerticalAlignment="Top" Height="28" Width="117"/>
        <TextBox x:Name="txtWidth" HorizontalAlignment="Left" ToolTip="Enter values within range of 100 and 500" Margin="367,231,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="212" Height="28" Text="{Binding Image.Width, UpdateSourceTrigger=PropertyChanged ,Mode=TwoWay, ValidatesOnDataErrors=True}"/>
        <TextBlock x:Name="lblImage" HorizontalAlignment="Left" Margin="160,289,0,0" TextWrapping="Wrap" Text="Image:" VerticalAlignment="Top" Height="28" Width="117"/>
        <TextBox x:Name="txtImage" HorizontalAlignment="Left" Margin="367,289,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="212" Height="34" Text="{Binding Image.Path, UpdateSourceTrigger=PropertyChanged ,Mode=TwoWay}" IsEnabled="False"/>
        <Button x:Name="btnSave" Content="Save" Command="{Binding SaveCommand}" HorizontalAlignment="Left" Margin="367,368,0,0" VerticalAlignment="Top" Width="93" Height="30" IsEnabled="{Binding CanSave}" Click="btnSave_Click"/>
        <Button x:Name="btnCancel" Content="Cancel" HorizontalAlignment="Left" Margin="486,368,0,0" VerticalAlignment="Top" Width="93" Height="30"  Command="{Binding CancelCommand}"/>
        <Button x:Name="btnBrowse" Content="Browse" HorizontalAlignment="Left" Margin="644,289,0,0" VerticalAlignment="Top" Width="93" Height="30" Command="{Binding BrowseCommand}"/>
        <TextBlock x:Name="ValidationMessage" HorizontalAlignment="Left" Foreground="Red" Margin="367,334,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="23" Width="212"/>
        <TextBlock HorizontalAlignment="Left" Margin="625,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="28" Width="136" x:Name="errName" Text="{Binding (Validation.Errors)[0].ErrorContent , ElementName=txtName, FallbackValue=''}" Foreground="red" FontWeight="bold" FontSize="10"/>
        <TextBlock HorizontalAlignment="Left" Margin="625,114,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="28" Width="136" x:Name="errRotation" Text="{Binding (Validation.Errors)[0].ErrorContent , ElementName=txtRotation}" Foreground="red" FontWeight="bold" FontSize="10"/>
        <TextBlock HorizontalAlignment="Left" Margin="625,170,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="28" Width="136" x:Name="errHeight" Text="{Binding (Validation.Errors)[0].ErrorContent , ElementName=txtHeight}" Foreground="red" FontWeight="bold" FontSize="10"/>
        <TextBlock HorizontalAlignment="Left" Margin="625,229,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="28" Width="136" x:Name="errWidth" Text="{Binding (Validation.Errors)[0].ErrorContent , ElementName=txtWidth}" Foreground="red" FontWeight="bold" FontSize="10"/>

    </Grid>
</Window>
===========================================================================
Addoreditwindow.xaml.cs

/**************************************************************************************************
 * Project Name    : Image Resizer Application
 * File Name       : AddOrEditWindow.xaml.cs
 * Description     : Code-behind file for the AddOrEditWindow.xaml. Contains event handling
 *                   such as Window Closing Event and some validations.
 * 
 * Author          : Anurag
 * Date Created    : 2024-10-28
**************************************************************************************************/

using ImageResizerApp.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace ImageResizerApp
{
    /// <summary>
    /// Interaction logic for AddOrEditWindow.xaml
    /// </summary>
    public partial class AddOrEditWindow : Window
    {
        public AddOrEditWindow(object viewModel)
        {
            InitializeComponent();
            this.DataContext = viewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            //ValidationMessage.Text = string.Empty;

            //if (string.IsNullOrWhiteSpace(txtName.Text))
            //{
            //    ValidationMessage.Text = "Name field cannot be empty.";
            //    txtName.Focus();
            //    return;
            //}

            //if (!double.TryParse(txtHeight.Text, out double Height) || Height < 100 || Height > 500)
            //{
            //    ValidationMessage.Text = "Enter Height within 100 and 500";
            //    txtHeight.Focus();
            //    return;
            //}

            //if (!double.TryParse(txtWidth.Text, out double Width) || Width < 100 || Width > 500)
            //{
            //    ValidationMessage.Text = "Enter Width within 100 and 500";
            //    txtWidth.Focus();
            //    return;
            //}

            //if (!double.TryParse(txtRotation.Text, out double Rotation) || Rotation < 0 || Rotation > 360)
            //{
            //    ValidationMessage.Text = "Enter Rotation value within 0 and 360";
            //    txtRotation.Focus();
            //    return;
            //}
        }
    }
}

=========================================================
Addviewmodel

/**************************************************************************************************
 * Project Name    : Image Resizer Application
 * File Name       : AddViewModel.cs
 * Description     : ViewModel responsible for handling image data creation and managing commands for 
 *                   UI actions such as Save, Browse, Cancel.
 * 
 * Author          : Anurag
 * Date Created    : 2024-10-28
 **************************************************************************************************/

using ImageResizerApp.Command;
using ImageResizerApp.ImageRepo;
using ImageResizerApp.Models;
using ImageResizerApp.Repo;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace ImageResizerApp.ViewModels
{
    public class AddViewModel : ViewModelBase, IDataErrorInfo
    {

        private IRepo repo;

        private MainViewModel mainViewModel;

        private EditViewModel editViewModel;
        public bool CanSave => !string.IsNullOrEmpty(Image.Name) && File.Exists(Image.Path);

        private ImageModel image;
        public ImageModel Image
        {
            get
            {
                return image;
            }
            set
            {
                image = value;
                OnPropertyChanged(nameof(Image));
                OnPropertyChanged(nameof(CanSave));
            }
        }

        private static AddViewModel instance;
        
        /// <summary>
        /// Gets the singleton instance of <see cref="AddViewModel"/>.
        /// </summary>
        public static AddViewModel Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new AddViewModel();
                }
                return instance;
            }
        }

        //private string errorMessage;

        //public string ErrorMessage
        //{
        //    get { return errorMessage; }
        //    set
        //    {
        //        errorMessage = value;
        //        OnPropertyChanged(nameof(ErrorMessage));
        //    }
        //}

        /// <summary>
        /// Command for saving the added image.
        /// </summary>
        public ICommand SaveCommand { get; }

        /// <summary>
        /// Command for opening an image from file.
        /// </summary>
        public ICommand BrowseCommand { get; }

        /// <summary>
        /// Command for closing the currently displayed window.
        /// </summary>
        public ICommand CancelCommand { get; }

        public string Error => throw new NotImplementedException();

        public AddViewModel()
        {
            repo = ImageMemoryRepo.Instance;
            mainViewModel = MainViewModel.Instance;
            editViewModel = EditViewModel.Instance;
            Image = new ImageModel
            {
                Name = "",
                Height = 0,
                Width = 0,
                Rotation = 0,
                Path = "Image Path"
            };
            SaveCommand = new RelayCommand(Create);
            BrowseCommand = new RelayCommand(Browse);
            CancelCommand = new RelayCommand(editViewModel.Cancel);

        }

        /// <summary>
        /// Add an image to the list.
        /// </summary>
        public void Create()
        {
            //Validate(Image);
            //if (!string.IsNullOrEmpty(ErrorMessage))
            //{
            //    return;
            //}
            var image = new ImageModel
            {
                Name = Image.Name,
                Height = Image.Height,
                Width = Image.Width,
                Rotation = Image.Rotation,
                Path = Image.Path,
            };

            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                       caption: "Confirm",
                       button: MessageBoxButton.YesNo,
                       icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }

            repo.Create(image);
            mainViewModel.Load();

            mainViewModel.SelectedImage = Image;
            ResetImage();

            Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive)?.Close();
        }

        private void ResetImage()
        {
            Image = new ImageModel
            {
                Name = "",
                Height = 0,
                Width = 0,
                Rotation= 0,
                Path = "Browse Path"
            };
        }

        /// <summary>
        /// Opens an image from an existing file.
        /// </summary>
        private void Browse()
        {
            try
            {
                OpenFileDialog openFileDialog = new OpenFileDialog
                {
                    Filter = "Image files (*.jpg;*.jpeg;*.png;*.bmp)|*.jpg;*.jpeg;*.png;*.bmp|All files (*.*)|*.*",
                    Title = "Select an Image"
                };

                if (openFileDialog.ShowDialog() == true)
                {
                    Image.Path = openFileDialog.FileName;
                    OnPropertyChanged(nameof(Image));
                    OnPropertyChanged(nameof(CanSave));
                }
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
                MessageBox.Show($"Error {ex.Message}");
            }
        }

        public string this[string columnName]
        {
            get
            {
                string validationMessage = null;

                switch (columnName)
                {
                    case nameof(Image.Rotation):
                        if (Image.Rotation < 0 || Image.Rotation > 360)
                        {
                            validationMessage = "Invalid rotation value. Must be between 0 and 360.";
                        }
                        break;

                    case nameof(Image.Height):
                        if (Image.Height < 100 || Image.Height > 500)
                        {
                            validationMessage = "Height should be between 100 and 500.";
                        }
                        break;

                    case nameof(Image.Width):
                        if (Image.Width < 100 || Image.Width > 500)
                        {
                            validationMessage = "Width should be between 100 and 500.";
                        }
                        break;

                    case nameof(Image.Name):
                        if (string.IsNullOrWhiteSpace(Image.Name))
                        {
                            validationMessage = "Name is required.";
                        }
                        break;
                }

                return validationMessage;
            }
        }

        /// <summary>
        /// Validates the data enetered into the text boxes.
        /// </summary>
        //public void Validate(ImageModel Image)
        //{
        //    ErrorMessage = string.Empty;

        //    // Validate Name
        //    if (string.IsNullOrWhiteSpace(Image.Name))
        //    {
        //        ErrorMessage += "Name is required.\n";
        //    }

        //    // Validate Height
        //    if (Image.Height < 100 || Image.Height > 500)
        //    {
        //        ErrorMessage += "Height should be between 100 and 500.\n";
        //    }

        //    // Validate Width
        //    if (Image.Width < 100 || Image.Width > 500)
        //    {
        //        ErrorMessage += "Width should be between 100 and 500.\n";
        //    }

        //    // Validate Rotation
        //    if (Image.Rotation < 0 || Image.Rotation > 360)
        //    {
        //        ErrorMessage += "Rotation value should be between 0 and 360.\n";
        //    }

        //}

    }
}

============================================================
Editviewmodel

/**************************************************************************************************
 * Project Name    : Image Resizer Application
 * File Name       : EditViewModel.cs
 * Description     : ViewModel responsible for handling image data updations and managing commands for 
 *                   UI actions such as Save, Browse, Cancel.
 * 
 * Author          : Anurag
 * Date Created    : 2024-10-28
 **************************************************************************************************/

using ImageResizerApp.Command;
using ImageResizerApp.ImageRepo;
using ImageResizerApp.Models;
using ImageResizerApp.Repo;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using System.ComponentModel;

namespace ImageResizerApp.ViewModels
{
    public class EditViewModel : ViewModelBase, IDataErrorInfo
    {
        private IRepo repo;

        private MainViewModel mainViewModel;

        public bool CanSave => !string.IsNullOrEmpty(Image.Name);


        private ImageModel image;
        public ImageModel Image
        {
            get
            {
                return image;
            }
            set
            {
                image = value;
                OnPropertyChanged(nameof(Image));
                OnPropertyChanged(nameof(CanSave));
            }
        }

        private static EditViewModel instance;
        /// <summary>
        /// Gets the singleton instance of <see cref="EditViewModel"/>.
        /// </summary>
        public static EditViewModel Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new EditViewModel();
                }
                return instance;
            }
        }

        /// <summary>
        /// Command for saving the edited image.
        /// </summary>
        public ICommand SaveCommand { get; }

        /// <summary>
        /// Command for opening an image from file.
        /// </summary>
        public ICommand BrowseCommand { get; }

        /// <summary>
        /// Command for closing the current displayed window.
        /// </summary>
        public ICommand CancelCommand { get; }

        public string Error => throw new NotImplementedException();

        public string this[string columnName]
        {
            get
            {
                string validationMessage = null;

                switch (columnName)
                {
                    case nameof(Image.Rotation):
                        if (Image.Rotation < 0 || Image.Rotation > 360)
                        {
                            validationMessage = "Invalid rotation value. Must be between 0 and 360.";
                        }
                        break;

                    case nameof(Image.Height):
                        if (Image.Height < 100 || Image.Height > 500)
                        {
                            validationMessage = "Height should be between 100 and 500.";
                        }
                        break;

                    case nameof(Image.Width):
                        if (Image.Width < 100 || Image.Width > 500)
                        {
                            validationMessage = "Width should be between 100 and 500.";
                        }
                        break;

                    case nameof(Image.Name):
                        if (string.IsNullOrWhiteSpace(Image.Name))
                        {
                            validationMessage = "Name is required.";
                        }
                        break;
                }

                return validationMessage;
            }
        }

        //public double Rotation
        //{
        //    get
        //    {

        //        return Image.Rotation;
        //    }
        //    set
        //    {

        //        Image.Rotation = value;
        //        OnPropertyChanged(nameof(Rotation));
        //    }
        //}

        public EditViewModel()
        {
            repo = ImageMemoryRepo.Instance;
            mainViewModel = MainViewModel.Instance;
            SaveCommand = new RelayCommand(Update);
            BrowseCommand = new RelayCommand(Browse);
            CancelCommand = new RelayCommand(Cancel);
        }

        /// <summary>
        /// Update image details to the list.
        /// </summary>
        public void Update()
        {
            var Image = mainViewModel.SelectedImage;

            var result = MessageBox.Show(messageBoxText: "Are you sure to Update?",
                       caption: "Confirm",
                       button: MessageBoxButton.YesNo,
                       icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            repo.Update(Image);
            mainViewModel.Load();
            result = MessageBox.Show(messageBoxText: "Updated Successfully",
            caption: "Alert",
            button: MessageBoxButton.OK,
            icon: MessageBoxImage.Information);
            mainViewModel.SelectedImage = Image;

            Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive)?.Close();

        }

        /// <summary>
        /// Closes the currently displayed window.
        /// </summary>
        public void Cancel()
        {
            Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive)?.Close();

        }

        /// <summary>
        /// Opens an image from an existing file.
        /// </summary>
        private void Browse()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "Image files (*.jpg;*.jpeg;*.png;*.bmp)|*.jpg;*.jpeg;*.png;*.bmp|All files (*.*)|*.*",
                Title = "Select an Image"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                Image.Path = openFileDialog.FileName;
                OnPropertyChanged(nameof(Image));
            }
        }


    }
}

===================================================
mainviewmodel

/**************************************************************************************************
 * Project Name    : Image Resizer Application
 * File Name       : MainViewModel.cs
 * Description     : ViewModel responsible for handling image data and managing commands for 
 *                   UI actions such as Save, Export, Delete.
 * 
 * Author          : Anurag
 * Date Created    : 2024-10-28
 **************************************************************************************************/

using ImageResizerApp.ImageRepo;
using ImageResizerApp.Command;
using ImageResizerApp.Models;
using ImageResizerApp.Repo;
using Microsoft.Win32;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using System.Windows;
using OfficeOpenXml;
using System.Windows.Media;

namespace ImageResizerApp.ViewModels
{
    /// <summary>
    /// ViewModel for managing image operations, including loading, saving, exporting, and deleting images.
    /// </summary>
    public class MainViewModel : ViewModelBase
    {
        private IRepo repo;
        private static MainViewModel instance;

        /// <summary>
        /// Gets the singleton instance of <see cref="MainViewModel"/>.
        /// </summary>
        public static MainViewModel Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new MainViewModel();
                }
                return instance;
            }
        }

        private ObservableCollection<ImageModel> images;

        /// <summary>
        /// Gets or sets the collection of images displayed in the application.
        /// </summary>
        public ObservableCollection<ImageModel> Images
        {
            get { return images; }
            set
            {
                images = value;
                OnPropertyChanged(nameof(Images));
            }
        }

        private bool isImageSelected = false;

        /// <summary>
        /// Gets or sets a value indicating whether an image is currently selected.
        /// </summary>
        public bool IsImageSelected
        {
            get { return isImageSelected; }
            set
            {
                isImageSelected = value;
                OnPropertyChanged(nameof(IsImageSelected));
            }
        }

        private ImageModel selectedImage;

        /// <summary>
        /// Gets or sets the selected image.
        /// </summary>
        public ImageModel SelectedImage
        {
            get { return selectedImage; }
            set
            {
                selectedImage = value;
                IsImageSelected = true;
                OnPropertyChanged(nameof(SelectedImage));
            }
        }

        /// <summary>
        /// Command for saving the selected image.
        /// </summary>
        public ICommand SaveCommand { get; }

        /// <summary>
        /// Command for exporting images to an Excel file.
        /// </summary>
        public ICommand ExportCommand { get; }

        /// <summary>
        /// Command for deleting the selected image.
        /// </summary>
        public ICommand DeleteCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MainViewModel"/> class and sets up commands and default data.
        /// </summary>
        private MainViewModel()
        {
            repo = ImageMemoryRepo.Instance;
            Images = new ObservableCollection<ImageModel>()
            {
                new ImageModel
                {
                    Name = "Aussies",
                    Width = 200,
                    Height = 200,
                    Rotation = 0,
                    Path = "C:\\Users\\Anurag C Ashok\\Desktop\\Australia.jpeg"
                }
            };
            SaveCommand = new RelayCommand(SaveImage);
            ExportCommand = new RelayCommand(ExportImage);
            DeleteCommand = new RelayCommand(DeleteImage);
        }

        /// <summary>
        /// Loads images from the repository into the <see cref="Images"/> collection.
        /// </summary>
        public void Load()
        {
            try
            {
                Images.Clear();
                var images = repo.ReadAll();
                foreach (ImageModel image in images)
                {
                    Images.Add(image);
                }
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
                MessageBox.Show($"Error loading images: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// Exports image details to an Excel file.
        /// </summary>
        public void ExportImage()
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Files (*.xlsx)|*.xlsx",
                DefaultExt = ".xlsx"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                try
                {
                    using (var package = new ExcelPackage())
                    {
                        var worksheet = package.Workbook.Worksheets.Add("Images");
                        worksheet.Cells[1, 1].Value = "Name";
                        worksheet.Cells[1, 2].Value = "Rotation";
                        worksheet.Cells[1, 3].Value = "Width";
                        worksheet.Cells[1, 4].Value = "Height";
                        worksheet.Cells[1, 5].Value = "Path";

                        for (int i = 0; i < Images.Count; i++)
                        {
                            var imageDetail = Images[i];
                            worksheet.Cells[i + 2, 1].Value = imageDetail.Name;
                            worksheet.Cells[i + 2, 2].Value = imageDetail.Rotation;
                            worksheet.Cells[i + 2, 3].Value = imageDetail.Width;
                            worksheet.Cells[i + 2, 4].Value = imageDetail.Height;
                            worksheet.Cells[i + 2, 5].Value = imageDetail.Path;
                        }

                        // Save the Excel file
                        using (var fileStream = new FileStream(saveFileDialog.FileName, FileMode.Create))
                        {
                            package.SaveAs(fileStream);
                        }
                    }

                    MessageBox.Show("Exported successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    Logger.log.Error(ex.Message);
                    MessageBox.Show($"Error exporting images: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        /// <summary>
        /// Deletes the selected image from the collection and repository.
        /// </summary>
        public void DeleteImage()
        {
            if (SelectedImage == null)
            {
                MessageBox.Show("Please select an image to delete.", "Alert", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var res = MessageBox.Show("Are you sure you want to delete this image?", "Confirm", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (res == MessageBoxResult.Yes)
            {
                try
                {
                    repo.Delete(SelectedImage);
                    Images.Remove(SelectedImage); // Update UI
                    SelectedImage = Images.FirstOrDefault(); // Select the next item
                    MessageBox.Show("Image deleted successfully.", "Deleted", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    Logger.log.Error(ex.Message);

                    MessageBox.Show($"Error deleting image: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        /// <summary>
        /// Saves the selected image with applied transformations (rotation, resizing) to a new file.
        /// </summary>
        public void SaveImage()
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "Image files (*.jpg;*.jpeg;*.png;*.bmp)|*.jpg;*.jpeg;*.png;*.bmp|All files (*.*)|*.*",
                Title = "Save Edited Image"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                try
                {
                    var bitmap = new BitmapImage(new Uri(SelectedImage.Path));
                    bitmap.CacheOption = BitmapCacheOption.OnLoad;

                    var transformGroup = new TransformGroup();
                    transformGroup.Children.Add(new RotateTransform(SelectedImage.Rotation));
                    transformGroup.Children.Add(new ScaleTransform(
                        SelectedImage.Width / (double)bitmap.PixelWidth,
                        SelectedImage.Height / (double)bitmap.PixelHeight));

                    var transformedBitmap = new TransformedBitmap(bitmap, transformGroup);

                    BitmapEncoder encoder = new PngBitmapEncoder();
                    encoder.Frames.Add(BitmapFrame.Create(transformedBitmap));

                    using (var fileStream = new FileStream(saveFileDialog.FileName, FileMode.Create))
                    {
                        encoder.Save(fileStream);
                    }

                    MessageBox.Show("Image saved successfully.", "Saved", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    Logger.log.Error(ex.Message);
                    MessageBox.Show($"Error saving image: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
    }
}

