Using selection sort
-------------------------------------------------------------------
public abstract class Employee
{
    public abstract int CalculateSalary();
    public bool Gt(Employee other)
    {
        return this.CalculateSalary() > other.CalculateSalary();
    }
    public bool Eq(Employee other)
    {
        return this.CalculateSalary() == other.CalculateSalary();
    }
    public bool Lt(Employee other)
    {
        return (!Gt(other)) && (!Eq(other));
    }
    public abstract void Read();
}

class FullTimeEmployee : Employee
{
    public int BaseSalary { get; set; }
    public int BonusPercentage { get; set; }

    public FullTimeEmployee(int baseSalary, int bonusPercentage)
    {
        BaseSalary = baseSalary;
        BonusPercentage = bonusPercentage;
    }

    public FullTimeEmployee()
    {
        BaseSalary = 0;
        BonusPercentage = 0;
    }

    public override int CalculateSalary()
    {
        return BaseSalary + (BaseSalary * BonusPercentage);
    }

    public override void Read()
    {
        Console.Write("BaseSalary :");
        BaseSalary = int.Parse(Console.ReadLine());
        Console.Write("BonusPercentage :");
        BonusPercentage = int.Parse(Console.ReadLine());

    }
    public override string ToString()
    {
        return $"[FullTimeEmployee, BaseSalary = {BaseSalary}, BonusPercentage = {BonusPercentage}, Total salary = {CalculateSalary()}]";
    }
}

class PartTimeEmployee : Employee
{
    public int HourlyRate { get; set; }
    public int HoursWorked { get; set; }

    public PartTimeEmployee(int hourlyRate, int hoursWorked)
    {
        HourlyRate = hourlyRate;
        HoursWorked = hoursWorked;
    }

    public PartTimeEmployee()
    {
        HourlyRate = 0;

    }

    public override int CalculateSalary()
    {
        return HourlyRate * HoursWorked;
    }

    public override void Read()
    {
        Console.Write("HourlyRate :");
        HourlyRate = int.Parse(Console.ReadLine());
        Console.Write("HoursWorked :");
        HoursWorked = int.Parse(Console.ReadLine());

    }
    public override string ToString()
    {
        return $"[PartTimeEmployee, HourlyRate = {HourlyRate}, HoursWorked = {HoursWorked}, Total salary = {CalculateSalary()}]";
    }
}

enum EmployeeType
{
    FullTimeEmployee = 1,
    PartTimeEmployee = 2
}

static void SelectionSort(Employee[] ar)
{
    int N = ar.Length;
    for (int I = 0; I < N - 1; I++) // traverse unsorted part
    {
        int minIndex = I; // assume the minimum is the first unsorted element
        for (int J = I + 1; J < N; J++) // traverse the rest of the array
        {
            if (ar[J].Lt(ar[minIndex])) // find the minimum in the rest of the array
            {
                minIndex = J; // update the index of the minimum element
            }
        }
        // swap the found minimum element with the first element of the unsorted part
        if (minIndex != I)
        {
            Employee temp = ar[I];
            ar[I] = ar[minIndex];
            ar[minIndex] = temp;
        }
    }
}
static void ReadEmployees(Employee[] employees)
{
    for (int I = 0; I < employees.Length; I++)
    {
        Console.Write("Shape Type(1-FullTimeEmployee, 2-PartTimeEmployee):");
        EmployeeType employeeType = (EmployeeType)int.Parse(Console.ReadLine());
        switch (employeeType)
        {
            case EmployeeType.FullTimeEmployee:
                employees[I] = new FullTimeEmployee();
                break;
            case EmployeeType.PartTimeEmployee:
                employees[I] = new PartTimeEmployee();
                break;
        }
        employees[I].Read();
    }
}

static void PrintEmployees(Employee[] employees)
{
    foreach (Employee employee in employees)
    {
        Console.Write($"{employee} ");
    }
}
static void ProcessEmployees()
{
    Console.Write("Number of Employees:");
    int N = int.Parse(Console.ReadLine());
    Employee[] employees = new Employee[N];

    ReadEmployees(employees);
    Console.WriteLine("Before sorting:");
    PrintEmployees(employees);
    //Sorting
    SelectionSort(employees);
    Console.WriteLine("\nAfter sorting:");
    PrintEmployees(employees);
}

static void Main()
{
    ProcessEmployees();
}
