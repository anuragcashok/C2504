1 - Employee without using array
-----------------------------------------------------------------------

internal class Program
{
    public abstract class Employee
    {
        public abstract int CalculateSalary();
    }

    class FullTimeEmployee : Employee
    {
        public int BaseSalary { get; set; }
        public int BonusPercentage { get; set; }

        public FullTimeEmployee(int baseSalary, int bonusPercentage)
        {
            BaseSalary = baseSalary;
            BonusPercentage = bonusPercentage;
        }

        public FullTimeEmployee()
        {
            BaseSalary = 0;
            BonusPercentage = 0;
        }

        public override int CalculateSalary()
        {
            return BaseSalary + (BaseSalary * BonusPercentage);
        }

        public void Read()
        {
            Console.Write("BaseSalary :");
            BaseSalary = int.Parse(Console.ReadLine());
            Console.Write("BonusPercentage :");
            BonusPercentage = int.Parse(Console.ReadLine());

        }
        public override string ToString()
        {
            return $"[FullTimeEmployee, BaseSalary = {BaseSalary}, BonusPercentage = {BonusPercentage}, Total salary = {CalculateSalary()}]";
        }
    }

    class PartTimeEmployee : Employee
    {
        public int HourlyRate { get; set; }
        public int HoursWorked { get; set; }

        public PartTimeEmployee(int hourlyRate, int hoursWorked)
        {
            HourlyRate = hourlyRate;
            HoursWorked = hoursWorked;
        }

        public PartTimeEmployee()
        {
            HourlyRate = 0;

        }

        public override int CalculateSalary()
        {
            return HourlyRate * HoursWorked;
        }

        public void Read()
        {
            Console.Write("HourlyRate :");
            HourlyRate = int.Parse(Console.ReadLine());
            Console.Write("HoursWorked :");
            HoursWorked = int.Parse(Console.ReadLine());

        }
        public override string ToString()
        {
            return $"[PartTimeEmployee, HourlyRate = {HourlyRate}, HoursWorked = {HoursWorked}, Total salary = {CalculateSalary()}]";
        }
    }

    enum EmployeeType
    {
        FullTimeEmployee = 1,
        PartTimeEmployee = 2
    }
    static void ReadEmployees()
    {
        EmployeeType employeeType;
        double minSalary = double.MaxValue;
        double maxSalary = double.MinValue;
        Employee minSalaryEmployee = null;
        Employee maxSalaryEmployee = null;

        string readOption = "y";
        do
        {
            Console.Write("Employee Type(1-FullTimeEmployee, 2-PartTimeEmployee):");
            employeeType = (EmployeeType)int.Parse(Console.ReadLine());

            Employee Employee = null;
            switch (employeeType)
            {
                case EmployeeType.FullTimeEmployee:
                    FullTimeEmployee fullTimeEmployee = new FullTimeEmployee();
                    fullTimeEmployee.Read();
                    Employee = fullTimeEmployee;
                    break;
                case EmployeeType.PartTimeEmployee:
                    PartTimeEmployee partTimeEmployee = new PartTimeEmployee();
                    partTimeEmployee.Read();
                    Employee = partTimeEmployee;
                    break;
            }
            if (Employee.CalculateSalary() < minSalary)
            {
                minSalary = Employee.CalculateSalary();
                minSalaryEmployee = Employee;
            }
            if (Employee.CalculateSalary() > maxSalary)
            {
                maxSalary = Employee.CalculateSalary();
                maxSalaryEmployee = Employee;
            }

            Console.Write("Do you wish to read one more Employee(y/n)?");
            readOption = Console.ReadLine();

        } while (readOption.ToLower() == "y");

        Console.WriteLine($"Min salaried Employee is {minSalaryEmployee}");
        Console.WriteLine($"Max salaried Employee is {maxSalaryEmployee}");
    }
    static void Main()
    {
        ReadEmployees();
    }
}

-----------------------------------------------------------------------
2 - Employee using array and sorted using insertion sort
-----------------------------------------------------------------------
public abstract class Employee
{
    public abstract int CalculateSalary();
    public bool Gt(Employee other)
    {
        return this.CalculateSalary() > other.CalculateSalary();
    }
    public bool Eq(Employee other)
    {
        return this.CalculateSalary() == other.CalculateSalary();
    }
    public abstract void Read();
}

class FullTimeEmployee : Employee
{
    public int BaseSalary { get; set; }
    public int BonusPercentage { get; set; }

    public FullTimeEmployee(int baseSalary, int bonusPercentage)
    {
        BaseSalary = baseSalary;
        BonusPercentage = bonusPercentage;
    }

    public FullTimeEmployee()
    {
        BaseSalary = 0;
        BonusPercentage = 0;
    }

    public override int CalculateSalary()
    {
        return BaseSalary + (BaseSalary * BonusPercentage);
    }

    public override void Read()
    {
        Console.Write("BaseSalary :");
        BaseSalary = int.Parse(Console.ReadLine());
        Console.Write("BonusPercentage :");
        BonusPercentage = int.Parse(Console.ReadLine());

    }
    public override string ToString()
    {
        return $"[FullTimeEmployee, BaseSalary = {BaseSalary}, BonusPercentage = {BonusPercentage}, Total salary = {CalculateSalary()}]";
    }
}

class PartTimeEmployee : Employee
{
    public int HourlyRate { get; set; }
    public int HoursWorked { get; set; }

    public PartTimeEmployee(int hourlyRate, int hoursWorked)
    {
        HourlyRate = hourlyRate;
        HoursWorked = hoursWorked;
    }

    public PartTimeEmployee()
    {
        HourlyRate = 0;

    }

    public override int CalculateSalary()
    {
        return HourlyRate * HoursWorked;
    }

    public override void Read()
    {
        Console.Write("HourlyRate :");
        HourlyRate = int.Parse(Console.ReadLine());
        Console.Write("HoursWorked :");
        HoursWorked = int.Parse(Console.ReadLine());

    }
    public override string ToString()
    {
        return $"[PartTimeEmployee, HourlyRate = {HourlyRate}, HoursWorked = {HoursWorked}, Total salary = {CalculateSalary()}]";
    }
}

enum EmployeeType
{
    FullTimeEmployee = 1,
    PartTimeEmployee = 2
}

static void InsertionSort(Employee[] ar)//##
{
    int N = ar.Length;
    for (int UI = 1; UI < N; UI++) //unsorted list, forward traversal 
    {
        Employee target = ar[UI];//##
        long TI = UI; //init target index
        int SI = UI - 1; //init for sorted list, backward traversal 
        while (SI >= 0 && ar[SI].Gt(target)) //##//'cond for sorted list' and 'is element greater'
        {
            ar[SI + 1] = ar[SI];//'shift right' parallel to 'SL traversal'
            TI = SI; //change TI if any greater el in the SL
            SI--; //decrement for sorted list 
        }
        if (TI != UI)
        {
            ar[TI] = target;
        }
    }
}
static void ReadEmployees(Employee[] employees)
{
    for (int I = 0; I < employees.Length; I++)
    {
        Console.Write("Shape Type(1-FullTimeEmployee, 2-PartTimeEmployee):");
        EmployeeType employeeType = (EmployeeType)int.Parse(Console.ReadLine());
        switch (employeeType)
        {
            case EmployeeType.FullTimeEmployee:
                employees[I] = new FullTimeEmployee();
                break;
            case EmployeeType.PartTimeEmployee:
                employees[I] = new PartTimeEmployee();
                break;
        }
        employees[I].Read();
    }
}

static void PrintEmployees(Employee[] employees)
{
    foreach (Employee employee in employees)
    {
        Console.Write($"{employee} ");
    }
}
static void ProcessEmployees()
{
    Console.Write("Number of Employees:");
    int N = int.Parse(Console.ReadLine());
    Employee[] employees = new Employee[N];

    ReadEmployees(employees);
    Console.WriteLine("Before sorting:");
    PrintEmployees(employees);
    //Sorting
    InsertionSort(employees);
    Console.WriteLine("After sorting:");
    PrintEmployees(employees);
}

static void Main()
{
    ProcessEmployees();
}
