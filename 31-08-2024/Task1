Program.cs
--------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Week4Assessment;

using log4net;

namespace Week4Assessment
{
    public class ServerException : Exception
    {
        public ServerException(string message) : base(message) { }
    }
    public class DoctorPrescription 
    {
        public int DoctorID { get; set; }
        public string PatientName { get; set; }
        public string Medication { get; set; }
        public double Dosage { get; set; }

        public override string ToString()
        {
            return $"DoctorID : {DoctorID} Patient : {PatientName} Dosage : {Dosage}\n";
        }
        public DoctorPrescription(int doctorID, string patientName, double dosage)
        {
            DoctorID = doctorID ;
            PatientName = patientName ;
            Dosage = dosage ;
        }
    }

    public class DoctorPrescriptionService
    {
        private static string connectionString = "Data Source=LAPTOP-19GF1AGG\\SQLEXPRESS04;Initial Catalog = Week4AssessmentDb; Integrated Security = True;";

        public static void Read(DoctorPrescription[] doctorPrescriptions)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT DoctorID, PatientName, Dosage FROM DoctorPrescription";
                    SqlCommand cmd = new SqlCommand(query, conn);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();


                    for (int i = 0; i < doctorPrescriptions.Length; i++)
                    {
                        if (!reader.Read())
                        {
                            throw new ServerException("[0101]Server Errror.");//throw error
                        }
                        doctorPrescriptions[i] = new DoctorPrescription(
                            (int)reader["DoctorID"],
                            (string)reader["PatientName"],
                            (double)reader["Dosage"]);    
                    }
                }
            }
            catch (SqlException ex)
            {
                // Handle SQL exceptions
                //Console.WriteLine($"SQL Error: {ex.Message}");
                throw new ServerException($"[0102]Server Errror.{ex.Message}");//throw Error
            }
            catch (ServerException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {

                throw new ServerException($"[0103]Server Errror.{ex.Message}");//throw Error
            }
        }
        public static void Sort(DoctorPrescription[] doctorPrescriptions)
        {
            int size = doctorPrescriptions.Length;
            for (int i = 0; i < size - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < size; j++)
                {
                    if (string.Compare(doctorPrescriptions[j].PatientName, doctorPrescriptions[minIndex].PatientName) < 0)
                    {
                        minIndex = j;
                    }
                }
                if (minIndex != i)
                {
                    DoctorPrescription temp = doctorPrescriptions[minIndex];
                    doctorPrescriptions[minIndex] = doctorPrescriptions[i];
                    doctorPrescriptions[i] = temp;
                }
            }
        }
        public static DoctorPrescription FindMin(DoctorPrescription[] doctorPrescriptions, int searchId)
        {
            
            var minDosage = double.MaxValue;
            DoctorPrescription minDoctorPrescription = null;
            foreach (DoctorPrescription item in doctorPrescriptions)
            {
                if (item.DoctorID == searchId && item.Dosage < minDosage)
                {
                    minDosage = item.Dosage;
                    minDoctorPrescription = item;
                }
            }
            return minDoctorPrescription;
        }
        public static DoctorPrescription FindThirdMax(DoctorPrescription[] doctorPrescriptions)
        {
            int size = doctorPrescriptions.Length;
            for (int i = 0; i < size - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < size; j++)
                {
                    if (doctorPrescriptions[j].Dosage < doctorPrescriptions[minIndex].Dosage)
                    {
                        minIndex = j;
                    }
                }
                if (minIndex != i)
                {
                    DoctorPrescription temp = doctorPrescriptions[minIndex];
                    doctorPrescriptions[minIndex] = doctorPrescriptions[i];
                    doctorPrescriptions[i] = temp;
                }
            }
            return doctorPrescriptions[size - 3];
        }
    }
    public class Programs
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Programs));

        static void Main()
        {
            DoctorPrescription[] doctorPrescriptions = new DoctorPrescription[6];

            try
            {
                DoctorPrescriptionService.Read(doctorPrescriptions);
            }
            catch (ServerException ex)
            {
                //log.Error($"{ex.Message}");
                Console.WriteLine($"{ex.Message}");
            }

            Console.Write("Enter doctor id to find the minimum dosage prescribed : ");
            int searchDoctorId = int.Parse(Console.ReadLine());
            DoctorPrescription min = DoctorPrescriptionService.FindMin(doctorPrescriptions, searchDoctorId);
            Console.WriteLine($"Minimum dosage : {min}");
            //log.Info($"Minimum dosage : {min}");
            DoctorPrescription thirdMax = DoctorPrescriptionService.FindThirdMax(doctorPrescriptions);
            Console.WriteLine($"Third maximum dosage : {thirdMax}");
            //log.Info($"Third maximum dosage : {thirdMax});
            DoctorPrescriptionService.Sort(doctorPrescriptions);
            string output = "";

            foreach (var e in doctorPrescriptions)
            {
                output += $"{e}";
            }
            Console.WriteLine(output);
            //log.Info(output);
        }
   
    }
}


--------------------------------------------------------------------
DoctorPrescriptionServiceTests.cs
--------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Week4Assessment;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Week4Assessment.Tests
{
    [TestClass()]
    public class DoctorPrescriptionServiceTests
    {
        [TestMethod()]
        public void SortTest()
        {
            DoctorPrescription[] doctorPrescriptions = new DoctorPrescription[5];
            DoctorPrescriptionService.Read(doctorPrescriptions);
            DoctorPrescription expected = new DoctorPrescription(1, "Mahesh", 22);
            //{
            //    DoctorID = 2,
            //    PatientName = "Vijesh",
            //    Dosage = 11
            //};
            DoctorPrescriptionService.Sort(doctorPrescriptions);
            DoctorPrescription actual = doctorPrescriptions[0];

            Assert.AreEqual(expected.ToString(), actual.ToString());
        }



        [TestMethod()]
        public void FindMinTest()
        {
            DoctorPrescription[] doctorPrescriptions = new DoctorPrescription[5];
            DoctorPrescriptionService.Read(doctorPrescriptions);
            int DoctorID = 2;
            DoctorPrescription expected = new DoctorPrescription(2, "Vijesh", 11);
            //{
            //    DoctorID = 2,
            //    PatientName = "Vijesh",
            //    Dosage = 11
            //};
            DoctorPrescription actual = DoctorPrescriptionService.FindMin(doctorPrescriptions,DoctorID);
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }

        [TestMethod()]
        public void FindThirdMaxTest()
        {
            DoctorPrescription[] doctorPrescriptions = new DoctorPrescription[5];
            DoctorPrescriptionService.Read(doctorPrescriptions);
            DoctorPrescription expected = new DoctorPrescription(1, "Mahesh", 22);
            //{
            //    DoctorID = 1,
            //    PatientName = "Mahesh",
            //    Dosage = 22
            //};
            DoctorPrescription actual = DoctorPrescriptionService.FindThirdMax(doctorPrescriptions);
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }
    }
}


--------------------------------------------------------------------
AssemblyInfo.cs
--------------------------------------------------------------------
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Week4AssesmentTests")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("HP")]
[assembly: AssemblyProduct("Week4AssesmentTests")]
[assembly: AssemblyCopyright("Copyright Â© HP 2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("365001af-e64c-496e-8792-160ecd810c08")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: log4net.Config.XmlConfigurator]


--------------------------------------------------------------------
App.Config
--------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>

	<log4net>
		<!-- File Appender -->
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="week4assessment_app_log.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>

		<!-- Console Appender -->
		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>

		<!-- Root logger -->
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
			<appender-ref ref="ConsoleAppender" />
		</root>
	</log4net>

	<startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
</configuration>
